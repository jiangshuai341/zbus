// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example

import (
	flatbuffers "github.com/jiangshuai341/zbus/flatbuffers"
)

type AmmunitionT struct {
	Name   string `json:"name"`
	Damage int32  `json:"damage"`
}

func (t *AmmunitionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	nameOffset := builder.CreateString(t.Name)
	AmmunitionStart(builder)
	AmmunitionAddName(builder, nameOffset)
	AmmunitionAddDamage(builder, t.Damage)
	return AmmunitionEnd(builder)
}

func (rcv *Ammunition) UnPackTo(t *AmmunitionT) {
	t.Name = string(rcv.Name())
	t.Damage = rcv.Damage()
}

func (rcv *Ammunition) UnPack() *AmmunitionT {
	if rcv == nil {
		return nil
	}
	t := &AmmunitionT{}
	rcv.UnPackTo(t)
	return t
}

type Ammunition struct {
	_tab flatbuffers.Table
}

func GetRootAsAmmunition(buf []byte, offset flatbuffers.UOffsetT) *Ammunition {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Ammunition{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAmmunition(buf []byte, offset flatbuffers.UOffsetT) *Ammunition {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Ammunition{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Ammunition) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Ammunition) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Ammunition) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Ammunition) Damage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Ammunition) MutateDamage(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func AmmunitionStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AmmunitionAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AmmunitionAddDamage(builder *flatbuffers.Builder, damage int32) {
	builder.PrependInt32Slot(1, damage, 0)
}
func AmmunitionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
