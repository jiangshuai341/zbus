// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INCLUDEEXAMPLE_TESTINCLUDE_H_
#define FLATBUFFERS_GENERATED_INCLUDEEXAMPLE_TESTINCLUDE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace testinclude {

struct Vec3;
struct Vec3Builder;
struct Vec3T;

struct Vec3T : public flatbuffers::NativeTable {
  typedef Vec3 TableType;
  float x = 0.0f;
  float y = 0.0f;
  float z = 0.0f;
};

struct Vec3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Vec3T NativeTableType;
  typedef Vec3Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           verifier.EndTable();
  }
  Vec3T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Vec3T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Vec3> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Vec3T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Vec3Builder {
  typedef Vec3 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Vec3::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Vec3::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(Vec3::VT_Z, z, 0.0f);
  }
  explicit Vec3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Vec3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Vec3>(end);
    return o;
  }
};

inline flatbuffers::Offset<Vec3> CreateVec3(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  Vec3Builder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

flatbuffers::Offset<Vec3> CreateVec3(flatbuffers::FlatBufferBuilder &_fbb, const Vec3T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline Vec3T *Vec3::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Vec3T>(new Vec3T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Vec3::UnPackTo(Vec3T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = x(); _o->x = _e; }
  { auto _e = y(); _o->y = _e; }
  { auto _e = z(); _o->z = _e; }
}

inline flatbuffers::Offset<Vec3> Vec3::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Vec3T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVec3(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Vec3> CreateVec3(flatbuffers::FlatBufferBuilder &_fbb, const Vec3T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const Vec3T* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _x = _o->x;
  auto _y = _o->y;
  auto _z = _o->z;
  return testinclude::CreateVec3(
      _fbb,
      _x,
      _y,
      _z);
}

inline const testinclude::Vec3 *GetVec3(const void *buf) {
  return flatbuffers::GetRoot<testinclude::Vec3>(buf);
}

inline const testinclude::Vec3 *GetSizePrefixedVec3(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<testinclude::Vec3>(buf);
}

inline bool VerifyVec3Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<testinclude::Vec3>(nullptr);
}

inline bool VerifySizePrefixedVec3Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<testinclude::Vec3>(nullptr);
}

inline void FinishVec3Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<testinclude::Vec3> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedVec3Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<testinclude::Vec3> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<testinclude::Vec3T> UnPackVec3(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<testinclude::Vec3T>(GetVec3(buf)->UnPack(res));
}

inline std::unique_ptr<testinclude::Vec3T> UnPackSizePrefixedVec3(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<testinclude::Vec3T>(GetSizePrefixedVec3(buf)->UnPack(res));
}

}  // namespace testinclude

#endif  // FLATBUFFERS_GENERATED_INCLUDEEXAMPLE_TESTINCLUDE_H_
