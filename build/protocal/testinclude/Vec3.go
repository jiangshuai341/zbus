// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package testinclude

import (
	flatbuffers "github.com/jiangshuai341/zbus/flatbuffers"
)

type Vec3T struct {
	X float32 `json:"x"`
	Y float32 `json:"y"`
	Z float32 `json:"z"`
}

func (t *Vec3T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	Vec3Start(builder)
	Vec3AddX(builder, t.X)
	Vec3AddY(builder, t.Y)
	Vec3AddZ(builder, t.Z)
	return Vec3End(builder)
}

func (rcv *Vec3) UnPackTo(t *Vec3T) {
	t.X = rcv.X()
	t.Y = rcv.Y()
	t.Z = rcv.Z()
}

func (rcv *Vec3) UnPack() *Vec3T {
	if rcv == nil {
		return nil
	}
	t := &Vec3T{}
	rcv.UnPackTo(t)
	return t
}

type Vec3 struct {
	_tab flatbuffers.Table
}

func GetRootAsVec3(buf []byte, offset flatbuffers.UOffsetT) *Vec3 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Vec3{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsVec3(buf []byte, offset flatbuffers.UOffsetT) *Vec3 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Vec3{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Vec3) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Vec3) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Vec3) X() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Vec3) MutateX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *Vec3) Y() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Vec3) MutateY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *Vec3) Z() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Vec3) MutateZ(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func Vec3Start(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func Vec3AddX(builder *flatbuffers.Builder, x float32) {
	builder.PrependFloat32Slot(0, x, 0.0)
}
func Vec3AddY(builder *flatbuffers.Builder, y float32) {
	builder.PrependFloat32Slot(1, y, 0.0)
}
func Vec3AddZ(builder *flatbuffers.Builder, z float32) {
	builder.PrependFloat32Slot(2, z, 0.0)
}
func Vec3End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
